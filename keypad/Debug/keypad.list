
keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f94  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001128  08001128  00011128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011d4  080011d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080011d4  080011d4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011d4  080011d4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011d4  080011d4  000111d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011d8  080011d8  000111d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080011dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001240  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001240  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a00  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000345  00000000  00000000  00020a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00020f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002abb  00000000  00000000  00020fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001437  00000000  00000000  00023aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000940d  00000000  00000000  00024eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a44  00000000  00000000  0002e338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001110 	.word	0x08001110

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	08001110 	.word	0x08001110

080001d4 <main>:
#include <stdio.h>
#include <stdint.h>

void delay (void);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	/* AHB1 address */
	uint32_t volatile *const pRccahb1enr_addr = (uint32_t*)(0x40023800 + 0x30);
 80001da:	4b9a      	ldr	r3, [pc, #616]	; (8000444 <main+0x270>)
 80001dc:	617b      	str	r3, [r7, #20]
	/* GPIO registers address */
	uint32_t volatile *const pGpioA_modeReg_addr = (uint32_t*)(0x40020000 + 0x00);
 80001de:	4b9a      	ldr	r3, [pc, #616]	; (8000448 <main+0x274>)
 80001e0:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pGpioA_inputData_addr = (uint32_t*)(0x40020000 + 0x10);
 80001e2:	4b9a      	ldr	r3, [pc, #616]	; (800044c <main+0x278>)
 80001e4:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pGpioA_outputData_addr = (uint32_t*)(0x40020000 + 0x14);
 80001e6:	4b9a      	ldr	r3, [pc, #616]	; (8000450 <main+0x27c>)
 80001e8:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pGpioA_pullupDown_addr = (uint32_t*)(0x40020000 + 0x0C);
 80001ea:	4b9a      	ldr	r3, [pc, #616]	; (8000454 <main+0x280>)
 80001ec:	607b      	str	r3, [r7, #4]

	/* Enable clock for GPIO */
	*pRccahb1enr_addr |= (1 << 0);
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0201 	orr.w	r2, r3, #1
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	601a      	str	r2, [r3, #0]

	/* Configure registers of GPIO */

	/* Input mode (coloumn) */
	*pGpioA_modeReg_addr &= ~(0xFF << 12);
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f423 227f 	bic.w	r2, r3, #1044480	; 0xff000
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	601a      	str	r2, [r3, #0]

	/* Output mode (rows) */
	*pGpioA_modeReg_addr &= ~(0XF << 0);
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f023 020f 	bic.w	r2, r3, #15
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioA_modeReg_addr |= (5 << 0);
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0205 	orr.w	r2, r3, #5
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	601a      	str	r2, [r3, #0]
	*pGpioA_modeReg_addr &= ~(0XF << 8);
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	601a      	str	r2, [r3, #0]
	*pGpioA_modeReg_addr |= (5 << 8);
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	601a      	str	r2, [r3, #0]

	/* Configure pull up/down of GPIO */
	*pGpioA_pullupDown_addr &= ~(0xFF << 12);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f423 227f 	bic.w	r2, r3, #1044480	; 0xff000
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpioA_pullupDown_addr |= (0x55 << 12);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f443 22aa 	orr.w	r2, r3, #348160	; 0x55000
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	601a      	str	r2, [r3, #0]

	while (1) {
		/* Make rows high */
		*pGpioA_outputData_addr |= (3 << 0);
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 0203 	orr.w	r2, r3, #3
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr |= (3 << 4);
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	601a      	str	r2, [r3, #0]

		/******************************************************************/

		/* Make R1 Low */
		*pGpioA_outputData_addr &= ~(1 << 0);
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f023 0201 	bic.w	r2, r3, #1
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	601a      	str	r2, [r3, #0]

		/* Check C1 */
		if (!(*pGpioA_inputData_addr & (1 << 6))) {
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800027a:	2b00      	cmp	r3, #0
 800027c:	d104      	bne.n	8000288 <main+0xb4>
			delay();
 800027e:	f000 f90b 	bl	8000498 <delay>
			printf("1\n");
 8000282:	4875      	ldr	r0, [pc, #468]	; (8000458 <main+0x284>)
 8000284:	f000 fab4 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 7))) {
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000290:	2b00      	cmp	r3, #0
 8000292:	d104      	bne.n	800029e <main+0xca>
			delay();
 8000294:	f000 f900 	bl	8000498 <delay>
			printf("2\n");
 8000298:	4870      	ldr	r0, [pc, #448]	; (800045c <main+0x288>)
 800029a:	f000 faa9 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 8))) {
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d104      	bne.n	80002b4 <main+0xe0>
			delay();
 80002aa:	f000 f8f5 	bl	8000498 <delay>
			printf("3\n");
 80002ae:	486c      	ldr	r0, [pc, #432]	; (8000460 <main+0x28c>)
 80002b0:	f000 fa9e 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 9))) {
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d104      	bne.n	80002ca <main+0xf6>
			delay();
 80002c0:	f000 f8ea 	bl	8000498 <delay>
			printf("A\n");
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <main+0x290>)
 80002c6:	f000 fa93 	bl	80007f0 <puts>
		}

		/******************************************************************/

		/* Make R2 Low */
		*pGpioA_outputData_addr |= (3 << 0);
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0203 	orr.w	r2, r3, #3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr |= (3 << 4);
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr &= ~(1 << 1);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f023 0202 	bic.w	r2, r3, #2
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	601a      	str	r2, [r3, #0]

		/* Check C2 */
		if (!(*pGpioA_inputData_addr & (1 << 6))) {
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d104      	bne.n	8000304 <main+0x130>
			delay();
 80002fa:	f000 f8cd 	bl	8000498 <delay>
			printf("4\n");
 80002fe:	485a      	ldr	r0, [pc, #360]	; (8000468 <main+0x294>)
 8000300:	f000 fa76 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 7))) {
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800030c:	2b00      	cmp	r3, #0
 800030e:	d104      	bne.n	800031a <main+0x146>
			delay();
 8000310:	f000 f8c2 	bl	8000498 <delay>
			printf("5\n");
 8000314:	4855      	ldr	r0, [pc, #340]	; (800046c <main+0x298>)
 8000316:	f000 fa6b 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 8))) {
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	2b00      	cmp	r3, #0
 8000324:	d104      	bne.n	8000330 <main+0x15c>
			delay();
 8000326:	f000 f8b7 	bl	8000498 <delay>
			printf("6\n");
 800032a:	4851      	ldr	r0, [pc, #324]	; (8000470 <main+0x29c>)
 800032c:	f000 fa60 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 9))) {
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000338:	2b00      	cmp	r3, #0
 800033a:	d104      	bne.n	8000346 <main+0x172>
			delay();
 800033c:	f000 f8ac 	bl	8000498 <delay>
			printf("B\n");
 8000340:	484c      	ldr	r0, [pc, #304]	; (8000474 <main+0x2a0>)
 8000342:	f000 fa55 	bl	80007f0 <puts>
		}

		/******************************************************************/

		/* Make R3 Low */
		*pGpioA_outputData_addr |= (3 << 0);
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f043 0203 	orr.w	r2, r3, #3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr |= (3 << 4);
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr &= ~(1 << 4);
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f023 0210 	bic.w	r2, r3, #16
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	601a      	str	r2, [r3, #0]

		/* Check C2 */
		if (!(*pGpioA_inputData_addr & (1 << 6))) {
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000372:	2b00      	cmp	r3, #0
 8000374:	d104      	bne.n	8000380 <main+0x1ac>
			delay();
 8000376:	f000 f88f 	bl	8000498 <delay>
			printf("7\n");
 800037a:	483f      	ldr	r0, [pc, #252]	; (8000478 <main+0x2a4>)
 800037c:	f000 fa38 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 7))) {
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000388:	2b00      	cmp	r3, #0
 800038a:	d104      	bne.n	8000396 <main+0x1c2>
			delay();
 800038c:	f000 f884 	bl	8000498 <delay>
			printf("8\n");
 8000390:	483a      	ldr	r0, [pc, #232]	; (800047c <main+0x2a8>)
 8000392:	f000 fa2d 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 8))) {
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d104      	bne.n	80003ac <main+0x1d8>
			delay();
 80003a2:	f000 f879 	bl	8000498 <delay>
			printf("9\n");
 80003a6:	4836      	ldr	r0, [pc, #216]	; (8000480 <main+0x2ac>)
 80003a8:	f000 fa22 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 9))) {
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d104      	bne.n	80003c2 <main+0x1ee>
			delay();
 80003b8:	f000 f86e 	bl	8000498 <delay>
			printf("C\n");
 80003bc:	4831      	ldr	r0, [pc, #196]	; (8000484 <main+0x2b0>)
 80003be:	f000 fa17 	bl	80007f0 <puts>
		}

		/******************************************************************/

		/* Make R4 Low */
		*pGpioA_outputData_addr |= (3 << 0);
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 0203 	orr.w	r2, r3, #3
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr |= (3 << 4);
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	601a      	str	r2, [r3, #0]
		*pGpioA_outputData_addr &= ~(1 << 5);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f023 0220 	bic.w	r2, r3, #32
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	601a      	str	r2, [r3, #0]

		/* Check C2 */
		if (!(*pGpioA_inputData_addr & (1 << 6))) {
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d104      	bne.n	80003fc <main+0x228>
			delay();
 80003f2:	f000 f851 	bl	8000498 <delay>
			printf("START\n");
 80003f6:	4824      	ldr	r0, [pc, #144]	; (8000488 <main+0x2b4>)
 80003f8:	f000 f9fa 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 7))) {
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000404:	2b00      	cmp	r3, #0
 8000406:	d104      	bne.n	8000412 <main+0x23e>
			delay();
 8000408:	f000 f846 	bl	8000498 <delay>
			printf("0\n");
 800040c:	481f      	ldr	r0, [pc, #124]	; (800048c <main+0x2b8>)
 800040e:	f000 f9ef 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 8))) {
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800041a:	2b00      	cmp	r3, #0
 800041c:	d104      	bne.n	8000428 <main+0x254>
			delay();
 800041e:	f000 f83b 	bl	8000498 <delay>
			printf("STOP\n");
 8000422:	481b      	ldr	r0, [pc, #108]	; (8000490 <main+0x2bc>)
 8000424:	f000 f9e4 	bl	80007f0 <puts>
		}
		if (!(*pGpioA_inputData_addr & (1 << 9))) {
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000430:	2b00      	cmp	r3, #0
 8000432:	f47f af0c 	bne.w	800024e <main+0x7a>
			delay();
 8000436:	f000 f82f 	bl	8000498 <delay>
			printf("D\n");
 800043a:	4816      	ldr	r0, [pc, #88]	; (8000494 <main+0x2c0>)
 800043c:	f000 f9d8 	bl	80007f0 <puts>
		*pGpioA_outputData_addr |= (3 << 0);
 8000440:	e705      	b.n	800024e <main+0x7a>
 8000442:	bf00      	nop
 8000444:	40023830 	.word	0x40023830
 8000448:	40020000 	.word	0x40020000
 800044c:	40020010 	.word	0x40020010
 8000450:	40020014 	.word	0x40020014
 8000454:	4002000c 	.word	0x4002000c
 8000458:	08001128 	.word	0x08001128
 800045c:	0800112c 	.word	0x0800112c
 8000460:	08001130 	.word	0x08001130
 8000464:	08001134 	.word	0x08001134
 8000468:	08001138 	.word	0x08001138
 800046c:	0800113c 	.word	0x0800113c
 8000470:	08001140 	.word	0x08001140
 8000474:	08001144 	.word	0x08001144
 8000478:	08001148 	.word	0x08001148
 800047c:	0800114c 	.word	0x0800114c
 8000480:	08001150 	.word	0x08001150
 8000484:	08001154 	.word	0x08001154
 8000488:	08001158 	.word	0x08001158
 800048c:	08001160 	.word	0x08001160
 8000490:	08001164 	.word	0x08001164
 8000494:	0800116c 	.word	0x0800116c

08000498 <delay>:
		}
	}
}

/* Delay using for loop for switch debouncing */
void delay (void) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
	for (int32_t i = 0; i < 300000; i++);
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	e002      	b.n	80004aa <delay+0x12>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <delay+0x28>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	ddf8      	ble.n	80004a4 <delay+0xc>
}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	000493df 	.word	0x000493df

080004c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <ITM_SendChar+0x48>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <ITM_SendChar+0x48>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <ITM_SendChar+0x4c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <ITM_SendChar+0x4c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004e6:	bf00      	nop
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
	{
		*ptr++ = (char)__io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
	}

return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffab 	bl	80004c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
	}
	return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ae:	605a      	str	r2, [r3, #4]
	return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_isatty>:

int _isatty(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 f846 	bl	80006b0 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20018000 	.word	0x20018000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000080 	.word	0x20000080
 8000658:	20000098 	.word	0x20000098

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	; (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 f817 	bl	80006bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fda1 	bl	80001d4 <main>

08000692 <LoopForever>:

LoopForever:
  b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006a0:	080011dc 	.word	0x080011dc
  ldr r2, =_sbss
 80006a4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006a8:	20000094 	.word	0x20000094

080006ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <__errno>:
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <__errno+0x8>)
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000

080006bc <__libc_init_array>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	4d0d      	ldr	r5, [pc, #52]	; (80006f4 <__libc_init_array+0x38>)
 80006c0:	4c0d      	ldr	r4, [pc, #52]	; (80006f8 <__libc_init_array+0x3c>)
 80006c2:	1b64      	subs	r4, r4, r5
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	2600      	movs	r6, #0
 80006c8:	42a6      	cmp	r6, r4
 80006ca:	d109      	bne.n	80006e0 <__libc_init_array+0x24>
 80006cc:	4d0b      	ldr	r5, [pc, #44]	; (80006fc <__libc_init_array+0x40>)
 80006ce:	4c0c      	ldr	r4, [pc, #48]	; (8000700 <__libc_init_array+0x44>)
 80006d0:	f000 fd1e 	bl	8001110 <_init>
 80006d4:	1b64      	subs	r4, r4, r5
 80006d6:	10a4      	asrs	r4, r4, #2
 80006d8:	2600      	movs	r6, #0
 80006da:	42a6      	cmp	r6, r4
 80006dc:	d105      	bne.n	80006ea <__libc_init_array+0x2e>
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e4:	4798      	blx	r3
 80006e6:	3601      	adds	r6, #1
 80006e8:	e7ee      	b.n	80006c8 <__libc_init_array+0xc>
 80006ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ee:	4798      	blx	r3
 80006f0:	3601      	adds	r6, #1
 80006f2:	e7f2      	b.n	80006da <__libc_init_array+0x1e>
 80006f4:	080011d4 	.word	0x080011d4
 80006f8:	080011d4 	.word	0x080011d4
 80006fc:	080011d4 	.word	0x080011d4
 8000700:	080011d8 	.word	0x080011d8

08000704 <memset>:
 8000704:	4402      	add	r2, r0
 8000706:	4603      	mov	r3, r0
 8000708:	4293      	cmp	r3, r2
 800070a:	d100      	bne.n	800070e <memset+0xa>
 800070c:	4770      	bx	lr
 800070e:	f803 1b01 	strb.w	r1, [r3], #1
 8000712:	e7f9      	b.n	8000708 <memset+0x4>

08000714 <_puts_r>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	460e      	mov	r6, r1
 8000718:	4605      	mov	r5, r0
 800071a:	b118      	cbz	r0, 8000724 <_puts_r+0x10>
 800071c:	6983      	ldr	r3, [r0, #24]
 800071e:	b90b      	cbnz	r3, 8000724 <_puts_r+0x10>
 8000720:	f000 fa48 	bl	8000bb4 <__sinit>
 8000724:	69ab      	ldr	r3, [r5, #24]
 8000726:	68ac      	ldr	r4, [r5, #8]
 8000728:	b913      	cbnz	r3, 8000730 <_puts_r+0x1c>
 800072a:	4628      	mov	r0, r5
 800072c:	f000 fa42 	bl	8000bb4 <__sinit>
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <_puts_r+0xd0>)
 8000732:	429c      	cmp	r4, r3
 8000734:	d120      	bne.n	8000778 <_puts_r+0x64>
 8000736:	686c      	ldr	r4, [r5, #4]
 8000738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800073a:	07db      	lsls	r3, r3, #31
 800073c:	d405      	bmi.n	800074a <_puts_r+0x36>
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	0598      	lsls	r0, r3, #22
 8000742:	d402      	bmi.n	800074a <_puts_r+0x36>
 8000744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000746:	f000 fad3 	bl	8000cf0 <__retarget_lock_acquire_recursive>
 800074a:	89a3      	ldrh	r3, [r4, #12]
 800074c:	0719      	lsls	r1, r3, #28
 800074e:	d51d      	bpl.n	800078c <_puts_r+0x78>
 8000750:	6923      	ldr	r3, [r4, #16]
 8000752:	b1db      	cbz	r3, 800078c <_puts_r+0x78>
 8000754:	3e01      	subs	r6, #1
 8000756:	68a3      	ldr	r3, [r4, #8]
 8000758:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800075c:	3b01      	subs	r3, #1
 800075e:	60a3      	str	r3, [r4, #8]
 8000760:	bb39      	cbnz	r1, 80007b2 <_puts_r+0x9e>
 8000762:	2b00      	cmp	r3, #0
 8000764:	da38      	bge.n	80007d8 <_puts_r+0xc4>
 8000766:	4622      	mov	r2, r4
 8000768:	210a      	movs	r1, #10
 800076a:	4628      	mov	r0, r5
 800076c:	f000 f848 	bl	8000800 <__swbuf_r>
 8000770:	3001      	adds	r0, #1
 8000772:	d011      	beq.n	8000798 <_puts_r+0x84>
 8000774:	250a      	movs	r5, #10
 8000776:	e011      	b.n	800079c <_puts_r+0x88>
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <_puts_r+0xd4>)
 800077a:	429c      	cmp	r4, r3
 800077c:	d101      	bne.n	8000782 <_puts_r+0x6e>
 800077e:	68ac      	ldr	r4, [r5, #8]
 8000780:	e7da      	b.n	8000738 <_puts_r+0x24>
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <_puts_r+0xd8>)
 8000784:	429c      	cmp	r4, r3
 8000786:	bf08      	it	eq
 8000788:	68ec      	ldreq	r4, [r5, #12]
 800078a:	e7d5      	b.n	8000738 <_puts_r+0x24>
 800078c:	4621      	mov	r1, r4
 800078e:	4628      	mov	r0, r5
 8000790:	f000 f888 	bl	80008a4 <__swsetup_r>
 8000794:	2800      	cmp	r0, #0
 8000796:	d0dd      	beq.n	8000754 <_puts_r+0x40>
 8000798:	f04f 35ff 	mov.w	r5, #4294967295
 800079c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800079e:	07da      	lsls	r2, r3, #31
 80007a0:	d405      	bmi.n	80007ae <_puts_r+0x9a>
 80007a2:	89a3      	ldrh	r3, [r4, #12]
 80007a4:	059b      	lsls	r3, r3, #22
 80007a6:	d402      	bmi.n	80007ae <_puts_r+0x9a>
 80007a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007aa:	f000 faa2 	bl	8000cf2 <__retarget_lock_release_recursive>
 80007ae:	4628      	mov	r0, r5
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da04      	bge.n	80007c0 <_puts_r+0xac>
 80007b6:	69a2      	ldr	r2, [r4, #24]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dc06      	bgt.n	80007ca <_puts_r+0xb6>
 80007bc:	290a      	cmp	r1, #10
 80007be:	d004      	beq.n	80007ca <_puts_r+0xb6>
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	6022      	str	r2, [r4, #0]
 80007c6:	7019      	strb	r1, [r3, #0]
 80007c8:	e7c5      	b.n	8000756 <_puts_r+0x42>
 80007ca:	4622      	mov	r2, r4
 80007cc:	4628      	mov	r0, r5
 80007ce:	f000 f817 	bl	8000800 <__swbuf_r>
 80007d2:	3001      	adds	r0, #1
 80007d4:	d1bf      	bne.n	8000756 <_puts_r+0x42>
 80007d6:	e7df      	b.n	8000798 <_puts_r+0x84>
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	250a      	movs	r5, #10
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	6022      	str	r2, [r4, #0]
 80007e0:	701d      	strb	r5, [r3, #0]
 80007e2:	e7db      	b.n	800079c <_puts_r+0x88>
 80007e4:	08001194 	.word	0x08001194
 80007e8:	080011b4 	.word	0x080011b4
 80007ec:	08001174 	.word	0x08001174

080007f0 <puts>:
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <puts+0xc>)
 80007f2:	4601      	mov	r1, r0
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff bf8d 	b.w	8000714 <_puts_r>
 80007fa:	bf00      	nop
 80007fc:	20000000 	.word	0x20000000

08000800 <__swbuf_r>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	460e      	mov	r6, r1
 8000804:	4614      	mov	r4, r2
 8000806:	4605      	mov	r5, r0
 8000808:	b118      	cbz	r0, 8000812 <__swbuf_r+0x12>
 800080a:	6983      	ldr	r3, [r0, #24]
 800080c:	b90b      	cbnz	r3, 8000812 <__swbuf_r+0x12>
 800080e:	f000 f9d1 	bl	8000bb4 <__sinit>
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <__swbuf_r+0x98>)
 8000814:	429c      	cmp	r4, r3
 8000816:	d12b      	bne.n	8000870 <__swbuf_r+0x70>
 8000818:	686c      	ldr	r4, [r5, #4]
 800081a:	69a3      	ldr	r3, [r4, #24]
 800081c:	60a3      	str	r3, [r4, #8]
 800081e:	89a3      	ldrh	r3, [r4, #12]
 8000820:	071a      	lsls	r2, r3, #28
 8000822:	d52f      	bpl.n	8000884 <__swbuf_r+0x84>
 8000824:	6923      	ldr	r3, [r4, #16]
 8000826:	b36b      	cbz	r3, 8000884 <__swbuf_r+0x84>
 8000828:	6923      	ldr	r3, [r4, #16]
 800082a:	6820      	ldr	r0, [r4, #0]
 800082c:	1ac0      	subs	r0, r0, r3
 800082e:	6963      	ldr	r3, [r4, #20]
 8000830:	b2f6      	uxtb	r6, r6
 8000832:	4283      	cmp	r3, r0
 8000834:	4637      	mov	r7, r6
 8000836:	dc04      	bgt.n	8000842 <__swbuf_r+0x42>
 8000838:	4621      	mov	r1, r4
 800083a:	4628      	mov	r0, r5
 800083c:	f000 f926 	bl	8000a8c <_fflush_r>
 8000840:	bb30      	cbnz	r0, 8000890 <__swbuf_r+0x90>
 8000842:	68a3      	ldr	r3, [r4, #8]
 8000844:	3b01      	subs	r3, #1
 8000846:	60a3      	str	r3, [r4, #8]
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	6022      	str	r2, [r4, #0]
 800084e:	701e      	strb	r6, [r3, #0]
 8000850:	6963      	ldr	r3, [r4, #20]
 8000852:	3001      	adds	r0, #1
 8000854:	4283      	cmp	r3, r0
 8000856:	d004      	beq.n	8000862 <__swbuf_r+0x62>
 8000858:	89a3      	ldrh	r3, [r4, #12]
 800085a:	07db      	lsls	r3, r3, #31
 800085c:	d506      	bpl.n	800086c <__swbuf_r+0x6c>
 800085e:	2e0a      	cmp	r6, #10
 8000860:	d104      	bne.n	800086c <__swbuf_r+0x6c>
 8000862:	4621      	mov	r1, r4
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f911 	bl	8000a8c <_fflush_r>
 800086a:	b988      	cbnz	r0, 8000890 <__swbuf_r+0x90>
 800086c:	4638      	mov	r0, r7
 800086e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <__swbuf_r+0x9c>)
 8000872:	429c      	cmp	r4, r3
 8000874:	d101      	bne.n	800087a <__swbuf_r+0x7a>
 8000876:	68ac      	ldr	r4, [r5, #8]
 8000878:	e7cf      	b.n	800081a <__swbuf_r+0x1a>
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <__swbuf_r+0xa0>)
 800087c:	429c      	cmp	r4, r3
 800087e:	bf08      	it	eq
 8000880:	68ec      	ldreq	r4, [r5, #12]
 8000882:	e7ca      	b.n	800081a <__swbuf_r+0x1a>
 8000884:	4621      	mov	r1, r4
 8000886:	4628      	mov	r0, r5
 8000888:	f000 f80c 	bl	80008a4 <__swsetup_r>
 800088c:	2800      	cmp	r0, #0
 800088e:	d0cb      	beq.n	8000828 <__swbuf_r+0x28>
 8000890:	f04f 37ff 	mov.w	r7, #4294967295
 8000894:	e7ea      	b.n	800086c <__swbuf_r+0x6c>
 8000896:	bf00      	nop
 8000898:	08001194 	.word	0x08001194
 800089c:	080011b4 	.word	0x080011b4
 80008a0:	08001174 	.word	0x08001174

080008a4 <__swsetup_r>:
 80008a4:	4b32      	ldr	r3, [pc, #200]	; (8000970 <__swsetup_r+0xcc>)
 80008a6:	b570      	push	{r4, r5, r6, lr}
 80008a8:	681d      	ldr	r5, [r3, #0]
 80008aa:	4606      	mov	r6, r0
 80008ac:	460c      	mov	r4, r1
 80008ae:	b125      	cbz	r5, 80008ba <__swsetup_r+0x16>
 80008b0:	69ab      	ldr	r3, [r5, #24]
 80008b2:	b913      	cbnz	r3, 80008ba <__swsetup_r+0x16>
 80008b4:	4628      	mov	r0, r5
 80008b6:	f000 f97d 	bl	8000bb4 <__sinit>
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <__swsetup_r+0xd0>)
 80008bc:	429c      	cmp	r4, r3
 80008be:	d10f      	bne.n	80008e0 <__swsetup_r+0x3c>
 80008c0:	686c      	ldr	r4, [r5, #4]
 80008c2:	89a3      	ldrh	r3, [r4, #12]
 80008c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008c8:	0719      	lsls	r1, r3, #28
 80008ca:	d42c      	bmi.n	8000926 <__swsetup_r+0x82>
 80008cc:	06dd      	lsls	r5, r3, #27
 80008ce:	d411      	bmi.n	80008f4 <__swsetup_r+0x50>
 80008d0:	2309      	movs	r3, #9
 80008d2:	6033      	str	r3, [r6, #0]
 80008d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008d8:	81a3      	strh	r3, [r4, #12]
 80008da:	f04f 30ff 	mov.w	r0, #4294967295
 80008de:	e03e      	b.n	800095e <__swsetup_r+0xba>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <__swsetup_r+0xd4>)
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d101      	bne.n	80008ea <__swsetup_r+0x46>
 80008e6:	68ac      	ldr	r4, [r5, #8]
 80008e8:	e7eb      	b.n	80008c2 <__swsetup_r+0x1e>
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <__swsetup_r+0xd8>)
 80008ec:	429c      	cmp	r4, r3
 80008ee:	bf08      	it	eq
 80008f0:	68ec      	ldreq	r4, [r5, #12]
 80008f2:	e7e6      	b.n	80008c2 <__swsetup_r+0x1e>
 80008f4:	0758      	lsls	r0, r3, #29
 80008f6:	d512      	bpl.n	800091e <__swsetup_r+0x7a>
 80008f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008fa:	b141      	cbz	r1, 800090e <__swsetup_r+0x6a>
 80008fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000900:	4299      	cmp	r1, r3
 8000902:	d002      	beq.n	800090a <__swsetup_r+0x66>
 8000904:	4630      	mov	r0, r6
 8000906:	f000 fa5b 	bl	8000dc0 <_free_r>
 800090a:	2300      	movs	r3, #0
 800090c:	6363      	str	r3, [r4, #52]	; 0x34
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000914:	81a3      	strh	r3, [r4, #12]
 8000916:	2300      	movs	r3, #0
 8000918:	6063      	str	r3, [r4, #4]
 800091a:	6923      	ldr	r3, [r4, #16]
 800091c:	6023      	str	r3, [r4, #0]
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	81a3      	strh	r3, [r4, #12]
 8000926:	6923      	ldr	r3, [r4, #16]
 8000928:	b94b      	cbnz	r3, 800093e <__swsetup_r+0x9a>
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000934:	d003      	beq.n	800093e <__swsetup_r+0x9a>
 8000936:	4621      	mov	r1, r4
 8000938:	4630      	mov	r0, r6
 800093a:	f000 fa01 	bl	8000d40 <__smakebuf_r>
 800093e:	89a0      	ldrh	r0, [r4, #12]
 8000940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000944:	f010 0301 	ands.w	r3, r0, #1
 8000948:	d00a      	beq.n	8000960 <__swsetup_r+0xbc>
 800094a:	2300      	movs	r3, #0
 800094c:	60a3      	str	r3, [r4, #8]
 800094e:	6963      	ldr	r3, [r4, #20]
 8000950:	425b      	negs	r3, r3
 8000952:	61a3      	str	r3, [r4, #24]
 8000954:	6923      	ldr	r3, [r4, #16]
 8000956:	b943      	cbnz	r3, 800096a <__swsetup_r+0xc6>
 8000958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800095c:	d1ba      	bne.n	80008d4 <__swsetup_r+0x30>
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	0781      	lsls	r1, r0, #30
 8000962:	bf58      	it	pl
 8000964:	6963      	ldrpl	r3, [r4, #20]
 8000966:	60a3      	str	r3, [r4, #8]
 8000968:	e7f4      	b.n	8000954 <__swsetup_r+0xb0>
 800096a:	2000      	movs	r0, #0
 800096c:	e7f7      	b.n	800095e <__swsetup_r+0xba>
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	08001194 	.word	0x08001194
 8000978:	080011b4 	.word	0x080011b4
 800097c:	08001174 	.word	0x08001174

08000980 <__sflush_r>:
 8000980:	898a      	ldrh	r2, [r1, #12]
 8000982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000986:	4605      	mov	r5, r0
 8000988:	0710      	lsls	r0, r2, #28
 800098a:	460c      	mov	r4, r1
 800098c:	d458      	bmi.n	8000a40 <__sflush_r+0xc0>
 800098e:	684b      	ldr	r3, [r1, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	dc05      	bgt.n	80009a0 <__sflush_r+0x20>
 8000994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000996:	2b00      	cmp	r3, #0
 8000998:	dc02      	bgt.n	80009a0 <__sflush_r+0x20>
 800099a:	2000      	movs	r0, #0
 800099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d0f9      	beq.n	800099a <__sflush_r+0x1a>
 80009a6:	2300      	movs	r3, #0
 80009a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009ac:	682f      	ldr	r7, [r5, #0]
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	d032      	beq.n	8000a18 <__sflush_r+0x98>
 80009b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009b4:	89a3      	ldrh	r3, [r4, #12]
 80009b6:	075a      	lsls	r2, r3, #29
 80009b8:	d505      	bpl.n	80009c6 <__sflush_r+0x46>
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	1ac0      	subs	r0, r0, r3
 80009be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009c0:	b10b      	cbz	r3, 80009c6 <__sflush_r+0x46>
 80009c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009c4:	1ac0      	subs	r0, r0, r3
 80009c6:	2300      	movs	r3, #0
 80009c8:	4602      	mov	r2, r0
 80009ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009cc:	6a21      	ldr	r1, [r4, #32]
 80009ce:	4628      	mov	r0, r5
 80009d0:	47b0      	blx	r6
 80009d2:	1c43      	adds	r3, r0, #1
 80009d4:	89a3      	ldrh	r3, [r4, #12]
 80009d6:	d106      	bne.n	80009e6 <__sflush_r+0x66>
 80009d8:	6829      	ldr	r1, [r5, #0]
 80009da:	291d      	cmp	r1, #29
 80009dc:	d82c      	bhi.n	8000a38 <__sflush_r+0xb8>
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <__sflush_r+0x108>)
 80009e0:	40ca      	lsrs	r2, r1
 80009e2:	07d6      	lsls	r6, r2, #31
 80009e4:	d528      	bpl.n	8000a38 <__sflush_r+0xb8>
 80009e6:	2200      	movs	r2, #0
 80009e8:	6062      	str	r2, [r4, #4]
 80009ea:	04d9      	lsls	r1, r3, #19
 80009ec:	6922      	ldr	r2, [r4, #16]
 80009ee:	6022      	str	r2, [r4, #0]
 80009f0:	d504      	bpl.n	80009fc <__sflush_r+0x7c>
 80009f2:	1c42      	adds	r2, r0, #1
 80009f4:	d101      	bne.n	80009fa <__sflush_r+0x7a>
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	b903      	cbnz	r3, 80009fc <__sflush_r+0x7c>
 80009fa:	6560      	str	r0, [r4, #84]	; 0x54
 80009fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009fe:	602f      	str	r7, [r5, #0]
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d0ca      	beq.n	800099a <__sflush_r+0x1a>
 8000a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a08:	4299      	cmp	r1, r3
 8000a0a:	d002      	beq.n	8000a12 <__sflush_r+0x92>
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	f000 f9d7 	bl	8000dc0 <_free_r>
 8000a12:	2000      	movs	r0, #0
 8000a14:	6360      	str	r0, [r4, #52]	; 0x34
 8000a16:	e7c1      	b.n	800099c <__sflush_r+0x1c>
 8000a18:	6a21      	ldr	r1, [r4, #32]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	47b0      	blx	r6
 8000a20:	1c41      	adds	r1, r0, #1
 8000a22:	d1c7      	bne.n	80009b4 <__sflush_r+0x34>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0c4      	beq.n	80009b4 <__sflush_r+0x34>
 8000a2a:	2b1d      	cmp	r3, #29
 8000a2c:	d001      	beq.n	8000a32 <__sflush_r+0xb2>
 8000a2e:	2b16      	cmp	r3, #22
 8000a30:	d101      	bne.n	8000a36 <__sflush_r+0xb6>
 8000a32:	602f      	str	r7, [r5, #0]
 8000a34:	e7b1      	b.n	800099a <__sflush_r+0x1a>
 8000a36:	89a3      	ldrh	r3, [r4, #12]
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	81a3      	strh	r3, [r4, #12]
 8000a3e:	e7ad      	b.n	800099c <__sflush_r+0x1c>
 8000a40:	690f      	ldr	r7, [r1, #16]
 8000a42:	2f00      	cmp	r7, #0
 8000a44:	d0a9      	beq.n	800099a <__sflush_r+0x1a>
 8000a46:	0793      	lsls	r3, r2, #30
 8000a48:	680e      	ldr	r6, [r1, #0]
 8000a4a:	bf08      	it	eq
 8000a4c:	694b      	ldreq	r3, [r1, #20]
 8000a4e:	600f      	str	r7, [r1, #0]
 8000a50:	bf18      	it	ne
 8000a52:	2300      	movne	r3, #0
 8000a54:	eba6 0807 	sub.w	r8, r6, r7
 8000a58:	608b      	str	r3, [r1, #8]
 8000a5a:	f1b8 0f00 	cmp.w	r8, #0
 8000a5e:	dd9c      	ble.n	800099a <__sflush_r+0x1a>
 8000a60:	6a21      	ldr	r1, [r4, #32]
 8000a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a64:	4643      	mov	r3, r8
 8000a66:	463a      	mov	r2, r7
 8000a68:	4628      	mov	r0, r5
 8000a6a:	47b0      	blx	r6
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	dc06      	bgt.n	8000a7e <__sflush_r+0xfe>
 8000a70:	89a3      	ldrh	r3, [r4, #12]
 8000a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a76:	81a3      	strh	r3, [r4, #12]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	e78e      	b.n	800099c <__sflush_r+0x1c>
 8000a7e:	4407      	add	r7, r0
 8000a80:	eba8 0800 	sub.w	r8, r8, r0
 8000a84:	e7e9      	b.n	8000a5a <__sflush_r+0xda>
 8000a86:	bf00      	nop
 8000a88:	20400001 	.word	0x20400001

08000a8c <_fflush_r>:
 8000a8c:	b538      	push	{r3, r4, r5, lr}
 8000a8e:	690b      	ldr	r3, [r1, #16]
 8000a90:	4605      	mov	r5, r0
 8000a92:	460c      	mov	r4, r1
 8000a94:	b913      	cbnz	r3, 8000a9c <_fflush_r+0x10>
 8000a96:	2500      	movs	r5, #0
 8000a98:	4628      	mov	r0, r5
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
 8000a9c:	b118      	cbz	r0, 8000aa6 <_fflush_r+0x1a>
 8000a9e:	6983      	ldr	r3, [r0, #24]
 8000aa0:	b90b      	cbnz	r3, 8000aa6 <_fflush_r+0x1a>
 8000aa2:	f000 f887 	bl	8000bb4 <__sinit>
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <_fflush_r+0x6c>)
 8000aa8:	429c      	cmp	r4, r3
 8000aaa:	d11b      	bne.n	8000ae4 <_fflush_r+0x58>
 8000aac:	686c      	ldr	r4, [r5, #4]
 8000aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0ef      	beq.n	8000a96 <_fflush_r+0xa>
 8000ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ab8:	07d0      	lsls	r0, r2, #31
 8000aba:	d404      	bmi.n	8000ac6 <_fflush_r+0x3a>
 8000abc:	0599      	lsls	r1, r3, #22
 8000abe:	d402      	bmi.n	8000ac6 <_fflush_r+0x3a>
 8000ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ac2:	f000 f915 	bl	8000cf0 <__retarget_lock_acquire_recursive>
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	4621      	mov	r1, r4
 8000aca:	f7ff ff59 	bl	8000980 <__sflush_r>
 8000ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ad0:	07da      	lsls	r2, r3, #31
 8000ad2:	4605      	mov	r5, r0
 8000ad4:	d4e0      	bmi.n	8000a98 <_fflush_r+0xc>
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	059b      	lsls	r3, r3, #22
 8000ada:	d4dd      	bmi.n	8000a98 <_fflush_r+0xc>
 8000adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ade:	f000 f908 	bl	8000cf2 <__retarget_lock_release_recursive>
 8000ae2:	e7d9      	b.n	8000a98 <_fflush_r+0xc>
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <_fflush_r+0x70>)
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	d101      	bne.n	8000aee <_fflush_r+0x62>
 8000aea:	68ac      	ldr	r4, [r5, #8]
 8000aec:	e7df      	b.n	8000aae <_fflush_r+0x22>
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <_fflush_r+0x74>)
 8000af0:	429c      	cmp	r4, r3
 8000af2:	bf08      	it	eq
 8000af4:	68ec      	ldreq	r4, [r5, #12]
 8000af6:	e7da      	b.n	8000aae <_fflush_r+0x22>
 8000af8:	08001194 	.word	0x08001194
 8000afc:	080011b4 	.word	0x080011b4
 8000b00:	08001174 	.word	0x08001174

08000b04 <std>:
 8000b04:	2300      	movs	r3, #0
 8000b06:	b510      	push	{r4, lr}
 8000b08:	4604      	mov	r4, r0
 8000b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b12:	6083      	str	r3, [r0, #8]
 8000b14:	8181      	strh	r1, [r0, #12]
 8000b16:	6643      	str	r3, [r0, #100]	; 0x64
 8000b18:	81c2      	strh	r2, [r0, #14]
 8000b1a:	6183      	str	r3, [r0, #24]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2208      	movs	r2, #8
 8000b20:	305c      	adds	r0, #92	; 0x5c
 8000b22:	f7ff fdef 	bl	8000704 <memset>
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <std+0x38>)
 8000b28:	6263      	str	r3, [r4, #36]	; 0x24
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <std+0x3c>)
 8000b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <std+0x40>)
 8000b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <std+0x44>)
 8000b34:	6224      	str	r4, [r4, #32]
 8000b36:	6323      	str	r3, [r4, #48]	; 0x30
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08000fa1 	.word	0x08000fa1
 8000b40:	08000fc3 	.word	0x08000fc3
 8000b44:	08000ffb 	.word	0x08000ffb
 8000b48:	0800101f 	.word	0x0800101f

08000b4c <_cleanup_r>:
 8000b4c:	4901      	ldr	r1, [pc, #4]	; (8000b54 <_cleanup_r+0x8>)
 8000b4e:	f000 b8af 	b.w	8000cb0 <_fwalk_reent>
 8000b52:	bf00      	nop
 8000b54:	08000a8d 	.word	0x08000a8d

08000b58 <__sfmoreglue>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	2268      	movs	r2, #104	; 0x68
 8000b5c:	1e4d      	subs	r5, r1, #1
 8000b5e:	4355      	muls	r5, r2
 8000b60:	460e      	mov	r6, r1
 8000b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b66:	f000 f997 	bl	8000e98 <_malloc_r>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	b140      	cbz	r0, 8000b80 <__sfmoreglue+0x28>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e9c0 1600 	strd	r1, r6, [r0]
 8000b74:	300c      	adds	r0, #12
 8000b76:	60a0      	str	r0, [r4, #8]
 8000b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b7c:	f7ff fdc2 	bl	8000704 <memset>
 8000b80:	4620      	mov	r0, r4
 8000b82:	bd70      	pop	{r4, r5, r6, pc}

08000b84 <__sfp_lock_acquire>:
 8000b84:	4801      	ldr	r0, [pc, #4]	; (8000b8c <__sfp_lock_acquire+0x8>)
 8000b86:	f000 b8b3 	b.w	8000cf0 <__retarget_lock_acquire_recursive>
 8000b8a:	bf00      	nop
 8000b8c:	20000085 	.word	0x20000085

08000b90 <__sfp_lock_release>:
 8000b90:	4801      	ldr	r0, [pc, #4]	; (8000b98 <__sfp_lock_release+0x8>)
 8000b92:	f000 b8ae 	b.w	8000cf2 <__retarget_lock_release_recursive>
 8000b96:	bf00      	nop
 8000b98:	20000085 	.word	0x20000085

08000b9c <__sinit_lock_acquire>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	; (8000ba4 <__sinit_lock_acquire+0x8>)
 8000b9e:	f000 b8a7 	b.w	8000cf0 <__retarget_lock_acquire_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	20000086 	.word	0x20000086

08000ba8 <__sinit_lock_release>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	; (8000bb0 <__sinit_lock_release+0x8>)
 8000baa:	f000 b8a2 	b.w	8000cf2 <__retarget_lock_release_recursive>
 8000bae:	bf00      	nop
 8000bb0:	20000086 	.word	0x20000086

08000bb4 <__sinit>:
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	f7ff fff0 	bl	8000b9c <__sinit_lock_acquire>
 8000bbc:	69a3      	ldr	r3, [r4, #24]
 8000bbe:	b11b      	cbz	r3, 8000bc8 <__sinit+0x14>
 8000bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc4:	f7ff bff0 	b.w	8000ba8 <__sinit_lock_release>
 8000bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <__sinit+0x68>)
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <__sinit+0x6c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	bf04      	itt	eq
 8000bda:	2301      	moveq	r3, #1
 8000bdc:	61a3      	streq	r3, [r4, #24]
 8000bde:	4620      	mov	r0, r4
 8000be0:	f000 f820 	bl	8000c24 <__sfp>
 8000be4:	6060      	str	r0, [r4, #4]
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 f81c 	bl	8000c24 <__sfp>
 8000bec:	60a0      	str	r0, [r4, #8]
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f000 f818 	bl	8000c24 <__sfp>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60e0      	str	r0, [r4, #12]
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	6860      	ldr	r0, [r4, #4]
 8000bfc:	f7ff ff82 	bl	8000b04 <std>
 8000c00:	68a0      	ldr	r0, [r4, #8]
 8000c02:	2201      	movs	r2, #1
 8000c04:	2109      	movs	r1, #9
 8000c06:	f7ff ff7d 	bl	8000b04 <std>
 8000c0a:	68e0      	ldr	r0, [r4, #12]
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	2112      	movs	r1, #18
 8000c10:	f7ff ff78 	bl	8000b04 <std>
 8000c14:	2301      	movs	r3, #1
 8000c16:	61a3      	str	r3, [r4, #24]
 8000c18:	e7d2      	b.n	8000bc0 <__sinit+0xc>
 8000c1a:	bf00      	nop
 8000c1c:	08001170 	.word	0x08001170
 8000c20:	08000b4d 	.word	0x08000b4d

08000c24 <__sfp>:
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	4607      	mov	r7, r0
 8000c28:	f7ff ffac 	bl	8000b84 <__sfp_lock_acquire>
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <__sfp+0x84>)
 8000c2e:	681e      	ldr	r6, [r3, #0]
 8000c30:	69b3      	ldr	r3, [r6, #24]
 8000c32:	b913      	cbnz	r3, 8000c3a <__sfp+0x16>
 8000c34:	4630      	mov	r0, r6
 8000c36:	f7ff ffbd 	bl	8000bb4 <__sinit>
 8000c3a:	3648      	adds	r6, #72	; 0x48
 8000c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	d503      	bpl.n	8000c4c <__sfp+0x28>
 8000c44:	6833      	ldr	r3, [r6, #0]
 8000c46:	b30b      	cbz	r3, 8000c8c <__sfp+0x68>
 8000c48:	6836      	ldr	r6, [r6, #0]
 8000c4a:	e7f7      	b.n	8000c3c <__sfp+0x18>
 8000c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c50:	b9d5      	cbnz	r5, 8000c88 <__sfp+0x64>
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <__sfp+0x88>)
 8000c54:	60e3      	str	r3, [r4, #12]
 8000c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8000c5c:	f000 f847 	bl	8000cee <__retarget_lock_init_recursive>
 8000c60:	f7ff ff96 	bl	8000b90 <__sfp_lock_release>
 8000c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c6c:	6025      	str	r5, [r4, #0]
 8000c6e:	61a5      	str	r5, [r4, #24]
 8000c70:	2208      	movs	r2, #8
 8000c72:	4629      	mov	r1, r5
 8000c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c78:	f7ff fd44 	bl	8000704 <memset>
 8000c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c84:	4620      	mov	r0, r4
 8000c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c88:	3468      	adds	r4, #104	; 0x68
 8000c8a:	e7d9      	b.n	8000c40 <__sfp+0x1c>
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	4638      	mov	r0, r7
 8000c90:	f7ff ff62 	bl	8000b58 <__sfmoreglue>
 8000c94:	4604      	mov	r4, r0
 8000c96:	6030      	str	r0, [r6, #0]
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d1d5      	bne.n	8000c48 <__sfp+0x24>
 8000c9c:	f7ff ff78 	bl	8000b90 <__sfp_lock_release>
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	e7ee      	b.n	8000c84 <__sfp+0x60>
 8000ca6:	bf00      	nop
 8000ca8:	08001170 	.word	0x08001170
 8000cac:	ffff0001 	.word	0xffff0001

08000cb0 <_fwalk_reent>:
 8000cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	4688      	mov	r8, r1
 8000cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8000cc6:	d505      	bpl.n	8000cd4 <_fwalk_reent+0x24>
 8000cc8:	6824      	ldr	r4, [r4, #0]
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d1f7      	bne.n	8000cbe <_fwalk_reent+0xe>
 8000cce:	4638      	mov	r0, r7
 8000cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cd4:	89ab      	ldrh	r3, [r5, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d907      	bls.n	8000cea <_fwalk_reent+0x3a>
 8000cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	d003      	beq.n	8000cea <_fwalk_reent+0x3a>
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	47c0      	blx	r8
 8000ce8:	4307      	orrs	r7, r0
 8000cea:	3568      	adds	r5, #104	; 0x68
 8000cec:	e7e9      	b.n	8000cc2 <_fwalk_reent+0x12>

08000cee <__retarget_lock_init_recursive>:
 8000cee:	4770      	bx	lr

08000cf0 <__retarget_lock_acquire_recursive>:
 8000cf0:	4770      	bx	lr

08000cf2 <__retarget_lock_release_recursive>:
 8000cf2:	4770      	bx	lr

08000cf4 <__swhatbuf_r>:
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	460e      	mov	r6, r1
 8000cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	b096      	sub	sp, #88	; 0x58
 8000d00:	4614      	mov	r4, r2
 8000d02:	461d      	mov	r5, r3
 8000d04:	da08      	bge.n	8000d18 <__swhatbuf_r+0x24>
 8000d06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	602a      	str	r2, [r5, #0]
 8000d0e:	061a      	lsls	r2, r3, #24
 8000d10:	d410      	bmi.n	8000d34 <__swhatbuf_r+0x40>
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	e00e      	b.n	8000d36 <__swhatbuf_r+0x42>
 8000d18:	466a      	mov	r2, sp
 8000d1a:	f000 f9a7 	bl	800106c <_fstat_r>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	dbf1      	blt.n	8000d06 <__swhatbuf_r+0x12>
 8000d22:	9a01      	ldr	r2, [sp, #4]
 8000d24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d2c:	425a      	negs	r2, r3
 8000d2e:	415a      	adcs	r2, r3
 8000d30:	602a      	str	r2, [r5, #0]
 8000d32:	e7ee      	b.n	8000d12 <__swhatbuf_r+0x1e>
 8000d34:	2340      	movs	r3, #64	; 0x40
 8000d36:	2000      	movs	r0, #0
 8000d38:	6023      	str	r3, [r4, #0]
 8000d3a:	b016      	add	sp, #88	; 0x58
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d40 <__smakebuf_r>:
 8000d40:	898b      	ldrh	r3, [r1, #12]
 8000d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d44:	079d      	lsls	r5, r3, #30
 8000d46:	4606      	mov	r6, r0
 8000d48:	460c      	mov	r4, r1
 8000d4a:	d507      	bpl.n	8000d5c <__smakebuf_r+0x1c>
 8000d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d50:	6023      	str	r3, [r4, #0]
 8000d52:	6123      	str	r3, [r4, #16]
 8000d54:	2301      	movs	r3, #1
 8000d56:	6163      	str	r3, [r4, #20]
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	ab01      	add	r3, sp, #4
 8000d5e:	466a      	mov	r2, sp
 8000d60:	f7ff ffc8 	bl	8000cf4 <__swhatbuf_r>
 8000d64:	9900      	ldr	r1, [sp, #0]
 8000d66:	4605      	mov	r5, r0
 8000d68:	4630      	mov	r0, r6
 8000d6a:	f000 f895 	bl	8000e98 <_malloc_r>
 8000d6e:	b948      	cbnz	r0, 8000d84 <__smakebuf_r+0x44>
 8000d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d74:	059a      	lsls	r2, r3, #22
 8000d76:	d4ef      	bmi.n	8000d58 <__smakebuf_r+0x18>
 8000d78:	f023 0303 	bic.w	r3, r3, #3
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	81a3      	strh	r3, [r4, #12]
 8000d82:	e7e3      	b.n	8000d4c <__smakebuf_r+0xc>
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <__smakebuf_r+0x7c>)
 8000d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d88:	89a3      	ldrh	r3, [r4, #12]
 8000d8a:	6020      	str	r0, [r4, #0]
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	81a3      	strh	r3, [r4, #12]
 8000d92:	9b00      	ldr	r3, [sp, #0]
 8000d94:	6163      	str	r3, [r4, #20]
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	6120      	str	r0, [r4, #16]
 8000d9a:	b15b      	cbz	r3, 8000db4 <__smakebuf_r+0x74>
 8000d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000da0:	4630      	mov	r0, r6
 8000da2:	f000 f975 	bl	8001090 <_isatty_r>
 8000da6:	b128      	cbz	r0, 8000db4 <__smakebuf_r+0x74>
 8000da8:	89a3      	ldrh	r3, [r4, #12]
 8000daa:	f023 0303 	bic.w	r3, r3, #3
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	81a3      	strh	r3, [r4, #12]
 8000db4:	89a0      	ldrh	r0, [r4, #12]
 8000db6:	4305      	orrs	r5, r0
 8000db8:	81a5      	strh	r5, [r4, #12]
 8000dba:	e7cd      	b.n	8000d58 <__smakebuf_r+0x18>
 8000dbc:	08000b4d 	.word	0x08000b4d

08000dc0 <_free_r>:
 8000dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dc2:	2900      	cmp	r1, #0
 8000dc4:	d044      	beq.n	8000e50 <_free_r+0x90>
 8000dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dca:	9001      	str	r0, [sp, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f1a1 0404 	sub.w	r4, r1, #4
 8000dd2:	bfb8      	it	lt
 8000dd4:	18e4      	addlt	r4, r4, r3
 8000dd6:	f000 f97d 	bl	80010d4 <__malloc_lock>
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <_free_r+0x94>)
 8000ddc:	9801      	ldr	r0, [sp, #4]
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	b933      	cbnz	r3, 8000df0 <_free_r+0x30>
 8000de2:	6063      	str	r3, [r4, #4]
 8000de4:	6014      	str	r4, [r2, #0]
 8000de6:	b003      	add	sp, #12
 8000de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000dec:	f000 b978 	b.w	80010e0 <__malloc_unlock>
 8000df0:	42a3      	cmp	r3, r4
 8000df2:	d908      	bls.n	8000e06 <_free_r+0x46>
 8000df4:	6825      	ldr	r5, [r4, #0]
 8000df6:	1961      	adds	r1, r4, r5
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf01      	itttt	eq
 8000dfc:	6819      	ldreq	r1, [r3, #0]
 8000dfe:	685b      	ldreq	r3, [r3, #4]
 8000e00:	1949      	addeq	r1, r1, r5
 8000e02:	6021      	streq	r1, [r4, #0]
 8000e04:	e7ed      	b.n	8000de2 <_free_r+0x22>
 8000e06:	461a      	mov	r2, r3
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	b10b      	cbz	r3, 8000e10 <_free_r+0x50>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d9fa      	bls.n	8000e06 <_free_r+0x46>
 8000e10:	6811      	ldr	r1, [r2, #0]
 8000e12:	1855      	adds	r5, r2, r1
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	d10b      	bne.n	8000e30 <_free_r+0x70>
 8000e18:	6824      	ldr	r4, [r4, #0]
 8000e1a:	4421      	add	r1, r4
 8000e1c:	1854      	adds	r4, r2, r1
 8000e1e:	42a3      	cmp	r3, r4
 8000e20:	6011      	str	r1, [r2, #0]
 8000e22:	d1e0      	bne.n	8000de6 <_free_r+0x26>
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	6053      	str	r3, [r2, #4]
 8000e2a:	4421      	add	r1, r4
 8000e2c:	6011      	str	r1, [r2, #0]
 8000e2e:	e7da      	b.n	8000de6 <_free_r+0x26>
 8000e30:	d902      	bls.n	8000e38 <_free_r+0x78>
 8000e32:	230c      	movs	r3, #12
 8000e34:	6003      	str	r3, [r0, #0]
 8000e36:	e7d6      	b.n	8000de6 <_free_r+0x26>
 8000e38:	6825      	ldr	r5, [r4, #0]
 8000e3a:	1961      	adds	r1, r4, r5
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	bf04      	itt	eq
 8000e40:	6819      	ldreq	r1, [r3, #0]
 8000e42:	685b      	ldreq	r3, [r3, #4]
 8000e44:	6063      	str	r3, [r4, #4]
 8000e46:	bf04      	itt	eq
 8000e48:	1949      	addeq	r1, r1, r5
 8000e4a:	6021      	streq	r1, [r4, #0]
 8000e4c:	6054      	str	r4, [r2, #4]
 8000e4e:	e7ca      	b.n	8000de6 <_free_r+0x26>
 8000e50:	b003      	add	sp, #12
 8000e52:	bd30      	pop	{r4, r5, pc}
 8000e54:	20000088 	.word	0x20000088

08000e58 <sbrk_aligned>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	4e0e      	ldr	r6, [pc, #56]	; (8000e94 <sbrk_aligned+0x3c>)
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	6831      	ldr	r1, [r6, #0]
 8000e60:	4605      	mov	r5, r0
 8000e62:	b911      	cbnz	r1, 8000e6a <sbrk_aligned+0x12>
 8000e64:	f000 f88c 	bl	8000f80 <_sbrk_r>
 8000e68:	6030      	str	r0, [r6, #0]
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f000 f887 	bl	8000f80 <_sbrk_r>
 8000e72:	1c43      	adds	r3, r0, #1
 8000e74:	d00a      	beq.n	8000e8c <sbrk_aligned+0x34>
 8000e76:	1cc4      	adds	r4, r0, #3
 8000e78:	f024 0403 	bic.w	r4, r4, #3
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	d007      	beq.n	8000e90 <sbrk_aligned+0x38>
 8000e80:	1a21      	subs	r1, r4, r0
 8000e82:	4628      	mov	r0, r5
 8000e84:	f000 f87c 	bl	8000f80 <_sbrk_r>
 8000e88:	3001      	adds	r0, #1
 8000e8a:	d101      	bne.n	8000e90 <sbrk_aligned+0x38>
 8000e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8000e90:	4620      	mov	r0, r4
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	2000008c 	.word	0x2000008c

08000e98 <_malloc_r>:
 8000e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9c:	1ccd      	adds	r5, r1, #3
 8000e9e:	f025 0503 	bic.w	r5, r5, #3
 8000ea2:	3508      	adds	r5, #8
 8000ea4:	2d0c      	cmp	r5, #12
 8000ea6:	bf38      	it	cc
 8000ea8:	250c      	movcc	r5, #12
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	4607      	mov	r7, r0
 8000eae:	db01      	blt.n	8000eb4 <_malloc_r+0x1c>
 8000eb0:	42a9      	cmp	r1, r5
 8000eb2:	d905      	bls.n	8000ec0 <_malloc_r+0x28>
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	2600      	movs	r6, #0
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ec0:	4e2e      	ldr	r6, [pc, #184]	; (8000f7c <_malloc_r+0xe4>)
 8000ec2:	f000 f907 	bl	80010d4 <__malloc_lock>
 8000ec6:	6833      	ldr	r3, [r6, #0]
 8000ec8:	461c      	mov	r4, r3
 8000eca:	bb34      	cbnz	r4, 8000f1a <_malloc_r+0x82>
 8000ecc:	4629      	mov	r1, r5
 8000ece:	4638      	mov	r0, r7
 8000ed0:	f7ff ffc2 	bl	8000e58 <sbrk_aligned>
 8000ed4:	1c43      	adds	r3, r0, #1
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	d14d      	bne.n	8000f76 <_malloc_r+0xde>
 8000eda:	6834      	ldr	r4, [r6, #0]
 8000edc:	4626      	mov	r6, r4
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d140      	bne.n	8000f64 <_malloc_r+0xcc>
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	eb04 0803 	add.w	r8, r4, r3
 8000eec:	f000 f848 	bl	8000f80 <_sbrk_r>
 8000ef0:	4580      	cmp	r8, r0
 8000ef2:	d13a      	bne.n	8000f6a <_malloc_r+0xd2>
 8000ef4:	6821      	ldr	r1, [r4, #0]
 8000ef6:	3503      	adds	r5, #3
 8000ef8:	1a6d      	subs	r5, r5, r1
 8000efa:	f025 0503 	bic.w	r5, r5, #3
 8000efe:	3508      	adds	r5, #8
 8000f00:	2d0c      	cmp	r5, #12
 8000f02:	bf38      	it	cc
 8000f04:	250c      	movcc	r5, #12
 8000f06:	4629      	mov	r1, r5
 8000f08:	4638      	mov	r0, r7
 8000f0a:	f7ff ffa5 	bl	8000e58 <sbrk_aligned>
 8000f0e:	3001      	adds	r0, #1
 8000f10:	d02b      	beq.n	8000f6a <_malloc_r+0xd2>
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	442b      	add	r3, r5
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	e00e      	b.n	8000f38 <_malloc_r+0xa0>
 8000f1a:	6822      	ldr	r2, [r4, #0]
 8000f1c:	1b52      	subs	r2, r2, r5
 8000f1e:	d41e      	bmi.n	8000f5e <_malloc_r+0xc6>
 8000f20:	2a0b      	cmp	r2, #11
 8000f22:	d916      	bls.n	8000f52 <_malloc_r+0xba>
 8000f24:	1961      	adds	r1, r4, r5
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	6025      	str	r5, [r4, #0]
 8000f2a:	bf18      	it	ne
 8000f2c:	6059      	strne	r1, [r3, #4]
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	bf08      	it	eq
 8000f32:	6031      	streq	r1, [r6, #0]
 8000f34:	5162      	str	r2, [r4, r5]
 8000f36:	604b      	str	r3, [r1, #4]
 8000f38:	4638      	mov	r0, r7
 8000f3a:	f104 060b 	add.w	r6, r4, #11
 8000f3e:	f000 f8cf 	bl	80010e0 <__malloc_unlock>
 8000f42:	f026 0607 	bic.w	r6, r6, #7
 8000f46:	1d23      	adds	r3, r4, #4
 8000f48:	1af2      	subs	r2, r6, r3
 8000f4a:	d0b6      	beq.n	8000eba <_malloc_r+0x22>
 8000f4c:	1b9b      	subs	r3, r3, r6
 8000f4e:	50a3      	str	r3, [r4, r2]
 8000f50:	e7b3      	b.n	8000eba <_malloc_r+0x22>
 8000f52:	6862      	ldr	r2, [r4, #4]
 8000f54:	42a3      	cmp	r3, r4
 8000f56:	bf0c      	ite	eq
 8000f58:	6032      	streq	r2, [r6, #0]
 8000f5a:	605a      	strne	r2, [r3, #4]
 8000f5c:	e7ec      	b.n	8000f38 <_malloc_r+0xa0>
 8000f5e:	4623      	mov	r3, r4
 8000f60:	6864      	ldr	r4, [r4, #4]
 8000f62:	e7b2      	b.n	8000eca <_malloc_r+0x32>
 8000f64:	4634      	mov	r4, r6
 8000f66:	6876      	ldr	r6, [r6, #4]
 8000f68:	e7b9      	b.n	8000ede <_malloc_r+0x46>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f000 f8b6 	bl	80010e0 <__malloc_unlock>
 8000f74:	e7a1      	b.n	8000eba <_malloc_r+0x22>
 8000f76:	6025      	str	r5, [r4, #0]
 8000f78:	e7de      	b.n	8000f38 <_malloc_r+0xa0>
 8000f7a:	bf00      	nop
 8000f7c:	20000088 	.word	0x20000088

08000f80 <_sbrk_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4d06      	ldr	r5, [pc, #24]	; (8000f9c <_sbrk_r+0x1c>)
 8000f84:	2300      	movs	r3, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	602b      	str	r3, [r5, #0]
 8000f8c:	f7ff fb30 	bl	80005f0 <_sbrk>
 8000f90:	1c43      	adds	r3, r0, #1
 8000f92:	d102      	bne.n	8000f9a <_sbrk_r+0x1a>
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	b103      	cbz	r3, 8000f9a <_sbrk_r+0x1a>
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20000090 	.word	0x20000090

08000fa0 <__sread>:
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa8:	f000 f8a0 	bl	80010ec <_read_r>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	bfab      	itete	ge
 8000fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fb4:	181b      	addge	r3, r3, r0
 8000fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fba:	bfac      	ite	ge
 8000fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fbe:	81a3      	strhlt	r3, [r4, #12]
 8000fc0:	bd10      	pop	{r4, pc}

08000fc2 <__swrite>:
 8000fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc6:	461f      	mov	r7, r3
 8000fc8:	898b      	ldrh	r3, [r1, #12]
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	4605      	mov	r5, r0
 8000fce:	460c      	mov	r4, r1
 8000fd0:	4616      	mov	r6, r2
 8000fd2:	d505      	bpl.n	8000fe0 <__swrite+0x1e>
 8000fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd8:	2302      	movs	r3, #2
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f000 f868 	bl	80010b0 <_lseek_r>
 8000fe0:	89a3      	ldrh	r3, [r4, #12]
 8000fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fea:	81a3      	strh	r3, [r4, #12]
 8000fec:	4632      	mov	r2, r6
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff6:	f000 b817 	b.w	8001028 <_write_r>

08000ffa <__sseek>:
 8000ffa:	b510      	push	{r4, lr}
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001002:	f000 f855 	bl	80010b0 <_lseek_r>
 8001006:	1c43      	adds	r3, r0, #1
 8001008:	89a3      	ldrh	r3, [r4, #12]
 800100a:	bf15      	itete	ne
 800100c:	6560      	strne	r0, [r4, #84]	; 0x54
 800100e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001016:	81a3      	strheq	r3, [r4, #12]
 8001018:	bf18      	it	ne
 800101a:	81a3      	strhne	r3, [r4, #12]
 800101c:	bd10      	pop	{r4, pc}

0800101e <__sclose>:
 800101e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001022:	f000 b813 	b.w	800104c <_close_r>
	...

08001028 <_write_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4d07      	ldr	r5, [pc, #28]	; (8001048 <_write_r+0x20>)
 800102c:	4604      	mov	r4, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4611      	mov	r1, r2
 8001032:	2200      	movs	r2, #0
 8001034:	602a      	str	r2, [r5, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	f7ff fa89 	bl	800054e <_write>
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	d102      	bne.n	8001046 <_write_r+0x1e>
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	b103      	cbz	r3, 8001046 <_write_r+0x1e>
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	bd38      	pop	{r3, r4, r5, pc}
 8001048:	20000090 	.word	0x20000090

0800104c <_close_r>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4d06      	ldr	r5, [pc, #24]	; (8001068 <_close_r+0x1c>)
 8001050:	2300      	movs	r3, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	602b      	str	r3, [r5, #0]
 8001058:	f7ff fa95 	bl	8000586 <_close>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d102      	bne.n	8001066 <_close_r+0x1a>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	b103      	cbz	r3, 8001066 <_close_r+0x1a>
 8001064:	6023      	str	r3, [r4, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	20000090 	.word	0x20000090

0800106c <_fstat_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4d07      	ldr	r5, [pc, #28]	; (800108c <_fstat_r+0x20>)
 8001070:	2300      	movs	r3, #0
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	f7ff fa90 	bl	800059e <_fstat>
 800107e:	1c43      	adds	r3, r0, #1
 8001080:	d102      	bne.n	8001088 <_fstat_r+0x1c>
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	b103      	cbz	r3, 8001088 <_fstat_r+0x1c>
 8001086:	6023      	str	r3, [r4, #0]
 8001088:	bd38      	pop	{r3, r4, r5, pc}
 800108a:	bf00      	nop
 800108c:	20000090 	.word	0x20000090

08001090 <_isatty_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4d06      	ldr	r5, [pc, #24]	; (80010ac <_isatty_r+0x1c>)
 8001094:	2300      	movs	r3, #0
 8001096:	4604      	mov	r4, r0
 8001098:	4608      	mov	r0, r1
 800109a:	602b      	str	r3, [r5, #0]
 800109c:	f7ff fa8f 	bl	80005be <_isatty>
 80010a0:	1c43      	adds	r3, r0, #1
 80010a2:	d102      	bne.n	80010aa <_isatty_r+0x1a>
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	b103      	cbz	r3, 80010aa <_isatty_r+0x1a>
 80010a8:	6023      	str	r3, [r4, #0]
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
 80010ac:	20000090 	.word	0x20000090

080010b0 <_lseek_r>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4d07      	ldr	r5, [pc, #28]	; (80010d0 <_lseek_r+0x20>)
 80010b4:	4604      	mov	r4, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	2200      	movs	r2, #0
 80010bc:	602a      	str	r2, [r5, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	f7ff fa88 	bl	80005d4 <_lseek>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	d102      	bne.n	80010ce <_lseek_r+0x1e>
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	b103      	cbz	r3, 80010ce <_lseek_r+0x1e>
 80010cc:	6023      	str	r3, [r4, #0]
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	20000090 	.word	0x20000090

080010d4 <__malloc_lock>:
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <__malloc_lock+0x8>)
 80010d6:	f7ff be0b 	b.w	8000cf0 <__retarget_lock_acquire_recursive>
 80010da:	bf00      	nop
 80010dc:	20000084 	.word	0x20000084

080010e0 <__malloc_unlock>:
 80010e0:	4801      	ldr	r0, [pc, #4]	; (80010e8 <__malloc_unlock+0x8>)
 80010e2:	f7ff be06 	b.w	8000cf2 <__retarget_lock_release_recursive>
 80010e6:	bf00      	nop
 80010e8:	20000084 	.word	0x20000084

080010ec <_read_r>:
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4d07      	ldr	r5, [pc, #28]	; (800110c <_read_r+0x20>)
 80010f0:	4604      	mov	r4, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	2200      	movs	r2, #0
 80010f8:	602a      	str	r2, [r5, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f7ff fa0a 	bl	8000514 <_read>
 8001100:	1c43      	adds	r3, r0, #1
 8001102:	d102      	bne.n	800110a <_read_r+0x1e>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	b103      	cbz	r3, 800110a <_read_r+0x1e>
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	20000090 	.word	0x20000090

08001110 <_init>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	bf00      	nop
 8001114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001116:	bc08      	pop	{r3}
 8001118:	469e      	mov	lr, r3
 800111a:	4770      	bx	lr

0800111c <_fini>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	bf00      	nop
 8001120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001122:	bc08      	pop	{r3}
 8001124:	469e      	mov	lr, r3
 8001126:	4770      	bx	lr
